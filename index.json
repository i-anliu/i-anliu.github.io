[{"authors":["admin"],"categories":null,"content":"An Liu is a Professor in the School of Computer Science and Technology at Soochow University. He received his Ph. D. degree in computer science from both City University of Hong Kong (CityU) and University of Science and Technology of China (USTC) in 2009. His research interests include data management, crowdsourcing, recommender systems, data security and privacy, and cloud/service computing. He has published more than 130 papers on international journals and conferences including IEEE TKDE, IEEE TSC, IEEE IS, ICDE, WWW, IJCAI, and CIKM. He has been actively involved in the research community by serving as the leading guest editor for technical journals such as World Wide Web, as a reviewer for prestige journals such as ACM TKDD, ACM TOIT, ACM TDS, IEEE TKDE, IEEE TSC, IEEE TCC, and a PC member for numerous international conferences such as AAAI, ICDCS, DASFAA and WISE.\n","date":1585699200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1585699200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"http://0.0.0.0/author/an-liu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/an-liu/","section":"authors","summary":"An Liu is a Professor in the School of Computer Science and Technology at Soochow University. He received his Ph. D. degree in computer science from both City University of Hong Kong (CityU) and University of Science and Technology of China (USTC) in 2009.","tags":null,"title":"An Liu","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4e341564189a2e1a1cb21603ba4c1d9e","permalink":"http://0.0.0.0/experience/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/experience/","section":"","summary":"","tags":null,"title":"Experience","type":"page"},{"authors":null,"categories":null,"content":" 作业提交服务器：ftp://192.168.126.193\n用户名：stu\n密码：stu1234\n❗注意事项\n  请将需要提交的材料打包成zip文件，用自己的学号命名，上传至对应的文件夹中（比如第一次作业上传至Homework1中）\n  涉及伪代码和数学公式的作业，推荐大家使用在线$\\LaTeX$编辑器 Overleaf完成，提交编译生成的pdf文档即可。如果需要在overleaf中输入中文并能正确编译，首先在文档中加入package:\\usepackage[UTF8]{ctex}，然后修改设置：设置-\u0026gt;修改Latex引擎-\u0026gt;选择“XeLatex”\n   Thanks Kevin Wayne for sharing his slides with us.\nIf you want more slides, please go to Lecture Slides for Algorithm Design.\n   TOPIC SLIDES READINGS DEMOS HOMEWORK     00 Introduction link      01 Stable Matching link  link Homework1   02 Algorithm Analysis link  link Homework2   03 Graphs link  link     ","date":1599630220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599630220,"objectID":"bbff1a06bd1b9f9a6671c584f5d32b09","permalink":"http://0.0.0.0/lectures/algo_course/","publishdate":"2020-09-09T13:43:40+08:00","relpermalink":"/lectures/algo_course/","section":"lectures","summary":"As an opening topic, we look at an algorithmic problem ...","tags":null,"title":"Algorithm Design","type":"lectures"},{"authors":["Yanan Zhang","Guanfeng Liu","An Liu","Yifan Zhang","Zhixu Li","Xiangliang Zhang","Qing Li"],"categories":null,"content":"      ","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"08539d176d0cd501a960bb66e761c1e6","permalink":"http://0.0.0.0/publication/is2020-early/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/publication/is2020-early/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"Personalized Geographical Influence Modeling for POI Recommendation","type":"publication"},{"authors":["An Liu","Yifan Zhang","Xiangliang Zhang","Guanfeng Liu","Yanan Zhang","Zhixu Li","Lei Zhao","Qing Li","Xiaofang Zhou"],"categories":null,"content":"      ","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"6d228c652c2a8552c688f8055bdd7a13","permalink":"http://0.0.0.0/publication/tkde2020-early/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/publication/tkde2020-early/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"Representation Learning with Multi-level Attention for Activity Trajectory Similarity Computation","type":"publication"},{"authors":["Mingjun Xiao","Kai Ma","An Liu","Hui Zhao","Zhixu Li","Kai Zheng","Xiaofang Zhou"],"categories":null,"content":"      ","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"53aa86dd16c9811e012c556103ee2858","permalink":"http://0.0.0.0/publication/tkde2020/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/publication/tkde2020/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"SRA: Secure Reverse Auction for Task Assignment in Spatial Crowdsourcing","type":"publication"},{"authors":["Pengfei Ding","Guanfeng Liu","Pengpeng Zhao","An Liu","Zhixu Li","Kai Zheng"],"categories":null,"content":"      ","date":1573171200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573171200,"objectID":"b2a17609ebdb7e3e44d0728bb06a208b","permalink":"http://0.0.0.0/publication/icdm2019/","publishdate":"2019-11-08T00:00:00Z","relpermalink":"/publication/icdm2019/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"Reinforcement Learning Based Monte Carlo Tree Search for Temporal Path Discovery","type":"publication"},{"authors":null,"categories":null,"content":"   TOPIC SLIDES HOMEWORK DEMOS     01 - 基础知识 link  Homework 1    02 - 列表 link  Homework 2    02a - 元组 link     02b - 输入输出 link     03 - 条件与循环 link  Homework 3    04 - 列表-进阶应用 link  Homework 4    05 - 函数 - 基础知识与递归 link  Homework 5    06 - 字符串 - 基本方法 link     07 - 字典 link     08 - 函数 - 作用域、参数传递和进阶应用 link     09 - 集合 link     10 - 正则表达式 link     11 - 文件 link     12 - 异常 link      ","date":1570599820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570599820,"objectID":"8df967dfa100335b0332987fcde3dc3c","permalink":"http://0.0.0.0/lectures/python_course/","publishdate":"2019-10-09T13:43:40+08:00","relpermalink":"/lectures/python_course/","section":"lectures","summary":"In this course, you’ll learn hands-on with today’s most compelling, leading-edge computing technologies ...","tags":null,"title":"Python Programming","type":"lectures"},{"authors":["Huizhao Wang","Guanfeng Liu","An Liu","Zhixu Li","Kai Zheng"],"categories":null,"content":"      ","date":1565395200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565395200,"objectID":"94a42bbda045d5f849086b107ac35f43","permalink":"http://0.0.0.0/publication/ijcai2019/","publishdate":"2019-08-10T00:00:00Z","relpermalink":"/publication/ijcai2019/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"DMRAN: A Hierarchical Fine-Grained Attention-Based Network for Recommendation","type":"publication"},{"authors":["An Liu","Weiqi Wang","Shuo Shang","Qing Li","Xiangliang Zhang"],"categories":null,"content":"      ","date":1522540800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522540800,"objectID":"69b62180f6600e65f3e5cdbcb70fb569","permalink":"http://0.0.0.0/publication/geo2018/","publishdate":"2018-04-01T00:00:00Z","relpermalink":"/publication/geo2018/","section":"publication","summary":"      ","tags":["Source Themes"],"title":"Efficient task assignment in spatial crowdsourcing with worker and task privacy protection","type":"publication"},{"authors":null,"categories":null,"content":" 假设a和b是整数。描述下列语句的功能，并绘制变量和对象的引用图。  a=3 b=5 t=a a=b b=t  编写一个函数，产生5个取值范围是0.0到1.0之间均匀分布的随机数，计算并返回它们的平均值、最小值和最大值。可以使用内置函数max()和min()。函数框架如下：  def func2(): # your code here return avg, min_v, max_v  正$n$边形的面积等于$\\frac{n\\times s^2}{4 \\times \\tan{\\frac{\\pi}{n}}}$，其中$s$是其边长。编写一个函数，输入参数是2个数，分别代表边数$n$和边长$s$，返回该多边形的面积。函数框架如下：  def func3(n, s): # your code here return  编写一个函数，输入参数是三个正整数，如果其中任意一个数大于或者等于另两个数之和，返回False，否则返回True。函数框架如下：  def func4(a, b, c): # your code here return  三角形的面积可以由其边长确定。假设三条边长分别是$a,b,c$，那么面积$a=\\sqrt{s\\times(s-a)\\times(s-b)\\times(s-c)}$，其中$s=(a+b+c)/2$。编写一个函数，输入参数是三个正整数，分别代表一个三角形的三条边长，返回这个三角形的面积。函数框架如下：  def func5(a, b, c): # your code here return  编写一个函数，输入参数是三个正整数，如果这三个数可以满足构成三角形三条边的关系，那么返回这个三角形的面积，否则返回0。注意代码复用，也就是使用上面编写的函数来实现本题。函数框架如下：  def func6(a, b, c): # your code here return  编写一个函数，输入参数是三个数，按照从小到大的关系返回这三个数。比如输入是3，-5，1，那么返回-5，1，3。函数框架如下：  def func7(a, b, c): # your code here return a, b, c # assume a \u0026lt;= b \u0026lt;= c  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e434d898d600fd90231950e89a943ab4","permalink":"http://0.0.0.0/homework/python/1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/homework/python/1/","section":"homework","summary":" 假设a和b是整数。描述下列语句的功能，并绘制变量和对象的引用图。  a=3 b=5 t=a a=b b=t  编写一个函数，产生5个取值范围是0.0到1.0之间均匀分布的随机数，计算并返回它们的平均值、最小值和最大值。可以使用内置函数max()和min()。函数框架如下：  def func2(): # your code here return avg, min_v, max_v  正$n$边形的面积等于$\\frac{n\\times s^2}{4 \\times \\tan{\\frac{\\pi}{n}}}$，其中$s$是其边长。编写一个函数，输入参数是2个数，分别代表边数$n$和边长$s$，返回该多边形的面积。函数框架如下：  def func3(n, s): # your code here return  编写一个函数，输入参数是三个正整数，如果其中任意一个数大于或者等于另两个数之和，返回False，否则返回True。函数框架如下：  def func4(a, b, c): # your code here return  三角形的面积可以由其边长确定。假设三条边长分别是$a,b,c$，那么面积$a=\\sqrt{s\\times(s-a)\\times(s-b)\\times(s-c)}$，其中$s=(a+b+c)/2$。编写一个函数，输入参数是三个正整数，分别代表一个三角形的三条边长，返回这个三角形的面积。函数框架如下：  def func5(a, b, c): # your code here return  编写一个函数，输入参数是三个正整数，如果这三个数可以满足构成三角形三条边的关系，那么返回这个三角形的面积，否则返回0。注意代码复用，也就是使用上面编写的函数来实现本题。函数框架如下：  def func6(a, b, c): # your code here return  编写一个函数，输入参数是三个数，按照从小到大的关系返回这三个数。比如输入是3，-5，1，那么返回-5，1，3。函数框架如下：  def func7(a, b, c): # your code here return a, b, c # assume a \u0026lt;= b \u0026lt;= c  ","tags":null,"title":"","type":"homework"},{"authors":null,"categories":null,"content":" 构造合适的range对象，生成下列序列：   50, 60, 70, 80 8, 6, 4, 2, 0, -2, -4, -6, -8   使用列表推导，生成下列列表：   [1, 2, 4, 8, 16, 32, 64, 128] [0, 2, 6, 12, 20, 30, 42, 56] [1, -3, 5, -7, 9, -11, 13, -15]   使用列表推导，在不输入所有26个英文字母的情况下产生列表[\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, \u0026hellip;, \u0026lsquo;z\u0026rsquo;]。提示：可以使用内置函数chr()和ord()。   编写一个函数，输入参数是一个字符串，返回其中元音字母的个数。   编写一个函数，输入参数是两个列表$a$和$b$，返回列表$c$，其第$i$个元素$c[i]=a[i]\\times b[i]$。   编写一个函数，输入参数是两个列表$a$和$b$，以列表返回它们的公共元素。比如当$a$=[1, 2, 3]，$b$=[2, 3, 4]时，返回列表$c$=[2, 3]。   编写一个函数，输入参数是一个整数列表$L$和一个整数$t$，如果$t$不在$L$中，返回$L$，否则将$t$前面的元素和后面的元素分别反转，返回反转后的$L$。比如当$L$=[1, 2, 3, 4, 5, 6]，$t$=4时，反转后的列表是[3, 2, 1, 4, 6, 5]。  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"09e901f8a78d1cbcaaed2e476a925e5b","permalink":"http://0.0.0.0/homework/python/2/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/homework/python/2/","section":"homework","summary":" 构造合适的range对象，生成下列序列：   50, 60, 70, 80 8, 6, 4, 2, 0, -2, -4, -6, -8   使用列表推导，生成下列列表：   [1, 2, 4, 8, 16, 32, 64, 128] [0, 2, 6, 12, 20, 30, 42, 56] [1, -3, 5, -7, 9, -11, 13, -15]   使用列表推导，在不输入所有26个英文字母的情况下产生列表[\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, \u0026hellip;, \u0026lsquo;z\u0026rsquo;]。提示：可以使用内置函数chr()和ord()。   编写一个函数，输入参数是一个字符串，返回其中元音字母的个数。   编写一个函数，输入参数是两个列表$a$和$b$，返回列表$c$，其第$i$个元素$c[i]=a[i]\\times b[i]$。   编写一个函数，输入参数是两个列表$a$和$b$，以列表返回它们的公共元素。比如当$a$=[1, 2, 3]，$b$=[2, 3, 4]时，返回列表$c$=[2, 3]。   编写一个函数，输入参数是一个整数列表$L$和一个整数$t$，如果$t$不在$L$中，返回$L$，否则将$t$前面的元素和后面的元素分别反转，返回反转后的$L$。比如当$L$=[1, 2, 3, 4, 5, 6]，$t$=4时，反转后的列表是[3, 2, 1, 4, 6, 5]。  ","tags":null,"title":"","type":"homework"},{"authors":null,"categories":null,"content":" 三角形可以分成三类：等边三角形，等腰三角形和不等边三角形。编写一个函数，输入参数是三个正整数，如果这三个数可以满足构成三角形三条边的关系，则返回这个三角形的类型：等边三角形返回1，等腰三角形返回2，不等边三角形返回3；否则，返回None   假设Spring的第一天是March 20，Summer的第一天是June 21，Autumn的第一天是September 22，Winter的第一天是December 21。编写一个函数，输入参数是一个字符串month和一个整数day，返回month和day表示的季节。比如输入是June和20，返回Spring。   编写一个函数，输入参数是一个正整数，如果该数是质数，返回True，否则返回False。   编写一个函数，输入参数是一个正整数，返回该数所有的数字之和。比如输入是12345，那么返回15。   编写一个函数，输入参数是三个正整数，返回这三个数的最小公倍数。比如输入是2, 3, 8，那么返回24。  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"26ce4ab1350e4b61ed15f329d66db25d","permalink":"http://0.0.0.0/homework/python/3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/homework/python/3/","section":"homework","summary":" 三角形可以分成三类：等边三角形，等腰三角形和不等边三角形。编写一个函数，输入参数是三个正整数，如果这三个数可以满足构成三角形三条边的关系，则返回这个三角形的类型：等边三角形返回1，等腰三角形返回2，不等边三角形返回3；否则，返回None   假设Spring的第一天是March 20，Summer的第一天是June 21，Autumn的第一天是September 22，Winter的第一天是December 21。编写一个函数，输入参数是一个字符串month和一个整数day，返回month和day表示的季节。比如输入是June和20，返回Spring。   编写一个函数，输入参数是一个正整数，如果该数是质数，返回True，否则返回False。   编写一个函数，输入参数是一个正整数，返回该数所有的数字之和。比如输入是12345，那么返回15。   编写一个函数，输入参数是三个正整数，返回这三个数的最小公倍数。比如输入是2, 3, 8，那么返回24。  ","tags":null,"title":"","type":"homework"},{"authors":null,"categories":null,"content":" 编写一个函数，输入参数是一个列表和一个数$t$，如果列表中没有数是$t$的倍数，返回True，否则返回False。   编写一个函数，输入参数是两个列表，以列表的形式返回这两个列表的公共元素。比如输入[1, 2, 3, 4, 5]和[2, 3, 5, 7, 11]，那么返回列表[2, 3, 5]。   编写一个函数，输入参数是一个列表和一个数$t$，返回该列表中最大的能整除$t$的数。比如输入列表是[3, 6, 2, 9, 12]，$t$等于18，那么返回9。   如果一个字符串正读和反读是一样的，那么称其是回文串。比如’ada’就是一个回文串。编写一个函数，输入参数是一个字符串，如果它是回文串，返回True，否则返回False。   串中任意个连续的字符组成的子序列称为该串的子串。比如’ab’就是’cab’的子串，但不是’acb’的子串。编写一个函数，输入参数是两个字符串$A$和$B$，如果$B$是$A$的子串，返回True，否则返回False。  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54a707408144d080843c7dce3dc1f918","permalink":"http://0.0.0.0/homework/python/4/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/homework/python/4/","section":"homework","summary":" 编写一个函数，输入参数是一个列表和一个数$t$，如果列表中没有数是$t$的倍数，返回True，否则返回False。   编写一个函数，输入参数是两个列表，以列表的形式返回这两个列表的公共元素。比如输入[1, 2, 3, 4, 5]和[2, 3, 5, 7, 11]，那么返回列表[2, 3, 5]。   编写一个函数，输入参数是一个列表和一个数$t$，返回该列表中最大的能整除$t$的数。比如输入列表是[3, 6, 2, 9, 12]，$t$等于18，那么返回9。   如果一个字符串正读和反读是一样的，那么称其是回文串。比如’ada’就是一个回文串。编写一个函数，输入参数是一个字符串，如果它是回文串，返回True，否则返回False。   串中任意个连续的字符组成的子序列称为该串的子串。比如’ab’就是’cab’的子串，但不是’acb’的子串。编写一个函数，输入参数是两个字符串$A$和$B$，如果$B$是$A$的子串，返回True，否则返回False。  ","tags":null,"title":"","type":"homework"},{"authors":null,"categories":null,"content":" 编写一个函数，输入参数是一个正整数$n$，返回第一个大于$n$的质数。   如果一个正整数$n$的所有因子（不包括其本身）之和等于$n$，称该数是完美数。比如28的所有因子之和是1+2+4+7+14=28，所以它是一个完美数。编写一个函数，输入参数是一个正整数，如果其是完美数，返回True，否则返回False。   一个正整数的密度定义为其各位数字的和与其位数的商。比如1234的密度是(1+2+3+4)/4=2.5。编写一个函数，输入参数是一个正整数，返回该数的密度。   编写一个函数，输入参数是一个整数列表，返回该列表中出现次数最多的数以及它的出现次数。比如输入列表是[1,2,3,2,3,4,3,4,5]，那么返回(3, 3)，因为数字3出现次数最多，共出现了3次。   斐波那契数列的前两项是1和1，后面每项都是其前两项的和，即1,1,2,3,5,8,13,21,…。编写一个函数，输入参数是正整数$n$，返回斐波那契数列前$n$项的和。   编写一个函数，输入参数是两个正整数$a$和$n$，返回$S_n=a+aa+\\cdots+\\overbrace{a\\cdots a}^{n}$的值。比如当$a$=3，$n$=5时，返回值为3+33+333+3333+33333=37035   如果一个质数倒过来写仍然是一个质数，那么称其是反质数。比如17倒过来写是71，且两者均为质数，所以17和71都是反质数。编写一个函数，输入参数是一个正整数$n$，以列表的形式返回前$n$个反质数。   编写一个函数，输入参数是一个整数列表，将其按照整数的因子个数从大到小排序，如果因子个数相等，则按照整数自然大小升序排序，返回排序后的列表。比如输入列表是[14, 12, 6]，返回列表是[12, 6, 14] 。因为14有3个因子（1, 2, 7），12有5个因子（1, 2, 3, 4, 6），6有3个因子（1, 2, 3）。   如果一个字符串可以通过重新排列另一个字符串的字符得到，称这两个字符串同构。比如字符串cat和act同构，字符串leader和dealer同构。编写一个函数，输入参数是两个由小写字符组成的字符串，如果它们是同构的，返回True，否则返回False。   编写一个函数，输入参数是一个字符串列表，将其中同构的字符串删除，返回删除后的列表。比如输入列表是[‘cat’, ‘leader’, ‘bus’, ‘act’, ‘dealer’, ‘but’]，返回列表是[‘bus’, ‘but’]。因为cat和act同构，leader和dealer同构。  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"77c11bb3100d0405fa9e042e16652bd8","permalink":"http://0.0.0.0/homework/python/5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/homework/python/5/","section":"homework","summary":" 编写一个函数，输入参数是一个正整数$n$，返回第一个大于$n$的质数。   如果一个正整数$n$的所有因子（不包括其本身）之和等于$n$，称该数是完美数。比如28的所有因子之和是1+2+4+7+14=28，所以它是一个完美数。编写一个函数，输入参数是一个正整数，如果其是完美数，返回True，否则返回False。   一个正整数的密度定义为其各位数字的和与其位数的商。比如1234的密度是(1+2+3+4)/4=2.5。编写一个函数，输入参数是一个正整数，返回该数的密度。   编写一个函数，输入参数是一个整数列表，返回该列表中出现次数最多的数以及它的出现次数。比如输入列表是[1,2,3,2,3,4,3,4,5]，那么返回(3, 3)，因为数字3出现次数最多，共出现了3次。   斐波那契数列的前两项是1和1，后面每项都是其前两项的和，即1,1,2,3,5,8,13,21,…。编写一个函数，输入参数是正整数$n$，返回斐波那契数列前$n$项的和。   编写一个函数，输入参数是两个正整数$a$和$n$，返回$S_n=a+aa+\\cdots+\\overbrace{a\\cdots a}^{n}$的值。比如当$a$=3，$n$=5时，返回值为3+33+333+3333+33333=37035   如果一个质数倒过来写仍然是一个质数，那么称其是反质数。比如17倒过来写是71，且两者均为质数，所以17和71都是反质数。编写一个函数，输入参数是一个正整数$n$，以列表的形式返回前$n$个反质数。   编写一个函数，输入参数是一个整数列表，将其按照整数的因子个数从大到小排序，如果因子个数相等，则按照整数自然大小升序排序，返回排序后的列表。比如输入列表是[14, 12, 6]，返回列表是[12, 6, 14] 。因为14有3个因子（1, 2, 7），12有5个因子（1, 2, 3, 4, 6），6有3个因子（1, 2, 3）。   如果一个字符串可以通过重新排列另一个字符串的字符得到，称这两个字符串同构。比如字符串cat和act同构，字符串leader和dealer同构。编写一个函数，输入参数是两个由小写字符组成的字符串，如果它们是同构的，返回True，否则返回False。   编写一个函数，输入参数是一个字符串列表，将其中同构的字符串删除，返回删除后的列表。比如输入列表是[‘cat’, ‘leader’, ‘bus’, ‘act’, ‘dealer’, ‘but’]，返回列表是[‘bus’, ‘but’]。因为cat和act同构，leader和dealer同构。  ","tags":null,"title":"","type":"homework"}]